有效括弧的判断：
正如超哥所说的，自然界的植物，比如洋葱，都是一层层从由内向外包起来的，想要解开洋葱问题，就得从外向内一层层解剖。
所以这道题的也由此去类推，用栈这种数据结构去解决
第一种解法，不借助外力，直接使用栈结构，先声明一个空栈，遍历被判断的括弧字符串
如果是左括弧，压入栈中，对于一个正常的括弧对，肯定是先有左括弧后有右括弧。
否则，如果左括弧压栈完毕，栈为空了，那么说明括弧不成对，返回false。
如果不为空，那么查询栈顶元素，如果当前的字符串中的括弧为右括弧，并且站定元素为对应的
左括弧，那么出栈该括弧，一直遍历，知道找不到出栈要求的元素，那么返回false
如果所有的元素都出栈，那么判断栈是否为空。
第二种解法，利用map散列存储的特性
利用map，将左右对应的括弧放入map中，用右括弧做key  做括弧做value 遍历括弧字符串，
遍历字符串，如果map中存在包含右括弧，那么去对应的左括弧，此时字符串的元素括弧和 之前压栈的做括弧相比较，如果不相等那么括弧不匹配，返回false
这里有个比较绕的地方，遍历栈右侧的括弧时，不好用压栈，但同时用到了map的映射关系，将右括弧对应的左括弧出栈，直到出栈完毕。
这时，压栈操作是一气呵成的，如果有不核对的右括弧存在于括弧中，那么比较栈元素和当前字符串是否匹配，不匹配返回false